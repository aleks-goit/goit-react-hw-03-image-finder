{"version":3,"sources":["components/Searchbar.js","components/Loader.js","components/ImageGalleryItem.js","components/ImageGallery.js","components/Modal.js","services/imagesApi.js","components/App.js","index.js"],"names":["Header","styled","header","Form","form","Button","button","ButtonLabel","span","Input","input","Searchbar","state","searchQuery","handleInputQuery","e","setState","target","value","handleFormSubmit","preventDefault","props","onSubmit","this","type","autocomplete","autoFocus","placeholder","onChange","Component","SpinerContainer","div","Loader","color","height","width","timeout","GalleryItem","li","GalleryImage","img","ImageGalleryItem","image","alt","onOpenModal","src","onClick","GalleryList","ul","ImageGallery","images","onOpen","map","key","largeImageURL","webformatURL","tags","Backdrop","ModalWindow","CloseModal","Modal","handleEscPress","code","onClose","window","addEventListener","removeEventListener","className","children","perPage","axios","get","then","response","data","hits","Container","App","loading","largeImgRef","handleSearchQuery","query","fetchImages","imagesApi","prevState","handleOpenModal","imgRef","handleCloseModal","prevProps","length","dataLength","next","hasMore","loader","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b487fb60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = styled.header`\r\n  top: 0;\r\n  left: 0;\r\n  position: sticky;\r\n  z-index: 1100;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 64px;\r\n  padding-right: 24px;\r\n  padding-left: 24px;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  color: #fff;\r\n  background-color: #3f51b5;\r\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\r\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 0;\r\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\r\n  background-size: 40%;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  opacity: 0.6;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  cursor: pointer;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst ButtonLabel = styled.span`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  clip-path: inset(50%);\r\n  border: 0;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: inline-block;\r\n  width: 100%;\r\n  font: inherit;\r\n  font-size: 20px;\r\n  border: none;\r\n  outline: none;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n\r\n  &::placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport default class Searchbar extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func,\r\n  }\r\n\r\n  state = {\r\n    searchQuery: '',\r\n  };\r\n\r\n  handleInputQuery = e => {\r\n    this.setState({ searchQuery: e.target.value });\r\n  };\r\n\r\n  handleFormSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state.searchQuery)\r\n    this.setState({searchQuery: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Header>\r\n        <Form onSubmit={this.handleFormSubmit}>\r\n          <Button type=\"submit\">\r\n            <ButtonLabel>Search</ButtonLabel>\r\n          </Button>\r\n\r\n          <Input\r\n            type=\"text\"\r\n            autocomplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={this.state.searchQuery}\r\n            onChange={this.handleInputQuery}\r\n          />\r\n        </Form>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Spinner from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nconst SpinerContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default class Loader extends Component {\r\n  render() {\r\n    return (\r\n      <SpinerContainer>\r\n        <Spinner\r\n          type=\"ThreeDots\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          timeout={3000}\r\n        />\r\n      </SpinerContainer>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GalleryItem = styled.li`\r\n  border-radius: 2px;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nconst GalleryImage = styled.img`\r\n  width: 100%;\r\n  height: 260px;\r\n  object-fit: cover;\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover {\r\n    transform: scale(1.03);\r\n    cursor: zoom-in;\r\n  }\r\n`;\r\n\r\nfunction ImageGalleryItem({ image, alt, onOpenModal }) {\r\n  return (\r\n    <GalleryItem>\r\n      <GalleryImage src={image} alt={alt} onClick={onOpenModal}/>\r\n    </GalleryItem>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  image: PropTypes.string,\r\n  alt: PropTypes.string,\r\n  onOpenModal: PropTypes.func,\r\n}\r\n\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\nimport ImageGalleryItem from './ImageGalleryItem';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GalleryList = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100vw - 48px);\r\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n  grid-gap: 16px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nfunction ImageGallery({ images, onOpen }) {\r\n  return (\r\n    <GalleryList>\r\n      {images.map(image => (\r\n        <ImageGalleryItem\r\n          key={image.largeImageURL}\r\n          image={image.webformatURL}\r\n          alt={image.tags}\r\n          onOpenModal ={() => onOpen(image.largeImageURL)}\r\n        />\r\n      ))}\r\n    </GalleryList>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object),\r\n  onOpen: PropTypes.func,\r\n}\r\n\r\nexport default ImageGallery;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Backdrop = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst ModalWindow= styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  max-width: 900px;\r\n  width: 100%;\r\n  border-radius: 3px;\r\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\r\n    z-index: 2000;\r\n`;\r\n\r\nconst CloseModal = styled.span`\r\n  position: absolute;\r\n  font-size: 30px;\r\n  color: #fff;\r\n  right: 50px;\r\n  top: 85px;\r\n\r\n  &:hover{\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default class Modal extends Component {\r\n  static propTypes = {\r\n    onClose: PropTypes.func,\r\n  }\r\n\r\n  componentDidMount(){\r\n    window.addEventListener('keydown', this.handleEscPress)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    window.removeEventListener('keydown', this.handleEscPress);\r\n  }\r\n\r\n  handleEscPress = (e) =>{\r\n    if(e.code === 'Escape'){\r\n      this.props.onClose();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Backdrop onClick={this.props.onClose}>\r\n        <CloseModal onClick={this.props.onClose}><i className=\"fas fa-times\"></i></CloseModal>\r\n        <ModalWindow>{this.props.children}</ModalWindow>\r\n      </Backdrop>\r\n    );\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst fetchImagesWithQuery = (searchQuery, perPage = 12) => {\r\n  return axios.get(\r\n    `https://pixabay.com/api/?q=${searchQuery}&page=1&key=11268845-1c4357a74a39c17587b597947&image_type=photo&orientation=horizontal&per_page=${perPage}`,\r\n  ).then(response => response.data.hits);\r\n};\r\n\r\nexport default { fetchImagesWithQuery };\r\n","import React, { Component } from 'react';\r\nimport Searchbar from './Searchbar';\r\nimport Loader from './Loader';\r\nimport ImageGallery from './ImageGallery';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Modal from './Modal';\r\nimport styled from 'styled-components';\r\nimport imagesApi from '../services/imagesApi';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 16px;\r\n  padding-bottom: 24px;\r\n`;\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    images: [],\r\n    loading: false,\r\n    perPage: 12,\r\n    searchQuery: '',\r\n    largeImgRef: null,\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevQuery = prevState.searchQuery;\r\n    const nextQjery = this.state.searchQuery;\r\n\r\n    if (prevQuery !== nextQjery) {\r\n      this.setState({ images: [], perPage: 12 });\r\n      this.fetchImages();\r\n    }\r\n  }\r\n\r\n  handleSearchQuery = query => {\r\n    this.setState({ searchQuery: query });\r\n  };\r\n\r\n  fetchImages = () => {\r\n    const { searchQuery, perPage } = this.state;\r\n\r\n    imagesApi.fetchImagesWithQuery(searchQuery, perPage).then(images =>\r\n      this.setState(prevState => ({\r\n        images: [...images],\r\n        perPage: prevState.perPage + 12,\r\n      })),\r\n    );\r\n  };\r\n\r\n  handleOpenModal = imgRef => {\r\n    this.setState({ largeImgRef: imgRef });\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.setState({ largeImgRef: null });\r\n  };\r\n\r\n  render() {\r\n    const { images, largeImgRef } = this.state;\r\n    return (\r\n      <Container>\r\n        <Searchbar onSubmit={this.handleSearchQuery} />\r\n        {images.length > 0 && (\r\n          <InfiniteScroll\r\n            dataLength={images.length}\r\n            next={this.fetchImages}\r\n            hasMore={true}\r\n            loader={<Loader />}\r\n          >\r\n            <ImageGallery images={images} onOpen={this.handleOpenModal} />\r\n          </InfiniteScroll>\r\n        )}\r\n        {largeImgRef && (\r\n          <Modal onClose={this.handleCloseModal}>\r\n            <img src={largeImgRef} alt=\"\" />\r\n          </Modal>\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// {images.length > 0 && <ImageGallery images={images} />}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './base.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}